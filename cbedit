#!/usr/bin/env python

import tempfile
import subprocess
import os
import getpass
import argparse
import sys

import lib.crypto as crypto
import lib.cfg as cfg
import lib.html as html
import lib.log as log

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Edit cryptobox database')
    parser.add_argument('-v', '--version', action='version', version='Cryptobox ' + cfg.version)
    parser.add_argument('-V', '--verbose', action='count', help='enable verbose mode')
    parser.add_argument('-e', '--edit-only', action='count', help='don\'t update HTML and bookmarklets')
    parser.add_argument('-c', '--config', action='store', help='use specified config')
    args = parser.parse_args()
    cfg.init(args)

    password = getpass.getpass()

    db_conf = crypto.read_db_conf(cfg.path['db_conf'])
    plaintext = crypto.dec_db(db_conf, password, cfg.path['db_cipher'], cfg.path['db_hmac'])

    EDITOR = os.environ.get('EDITOR', cfg.user['ui']['editor'])

    with tempfile.NamedTemporaryFile(suffix='.ini', delete=False) as f:
        file_name = f.name
        f.write(plaintext.encode('utf-8'))
        f.flush()

    mtime_begin = os.stat(file_name).st_mtime
    subprocess.call([EDITOR, "--", file_name])
    mtime_end = os.stat(file_name).st_mtime

    if mtime_begin != mtime_end:
        try:
            cfg.backup()
        except:
            ans = log.yn("Couldn't perform a backup, continue?")

            if not ans in ['Y', 'y']:
                sys.exit(0)

        crypto.enc_db(db_conf, password, file_name, cfg.path['db_cipher'], cfg.path['db_hmac'])
        os.remove(file_name)

        if 'edit_only' in vars(args):
            sys.exit(0)

        html.update(db_conf, password)
    else:
        log.p("No update to database")

